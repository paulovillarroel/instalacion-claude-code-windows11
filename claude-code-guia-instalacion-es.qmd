---
title: "Guía de Instalación de Claude Code para Windows 11: Configuración con WSL2"
format: 
  html:
    lang: es
    toc: true
    toc-depth: 3
    code-fold: false
    code-copy: true
    embed-resources: true
    self-contained: true
editor: visual
---

## Introducción

Claude Code es el asistente de codificación oficial con IA de Anthropic que se ejecuta en tu terminal, pero **requiere el Subsistema de Windows para Linux (WSL2)** para funcionar en Windows 11 - no puede ejecutarse nativamente en Windows. Esta herramienta basada en terminal se integra directamente con tu entorno de desarrollo para asistir con la edición de código, depuración, pruebas, flujos de trabajo de git y comprensión de proyectos mediante comandos en lenguaje natural.

## Requisitos del sistema y prerrequisitos

Antes de instalar Claude Code en Windows 11, necesitarás configurar un entorno Linux a través de WSL2. La herramienta requiere **Node.js 18+** (se recomienda LTS), **npm 10+**, y **WSL2 con Ubuntu 20.04+** o Debian 10+. Se recomienda Windows Terminal o un emulador de terminal equivalente para la mejor experiencia. Git también es recomendado para la funcionalidad de control de versiones.

Antes de sumergirnos en la instalación, entendamos qué necesita Claude Code para ejecutarse correctamente en tu sistema Windows 11. Piensa en estos requisitos como ingredientes para una receta - faltar incluso uno puede evitar que el plato final resulte bien. Explicaré no solo lo que necesitas, sino por qué cada componente importa y cómo verificar si ya lo tienes.

### Entendiendo por qué Claude Code necesita Linux en Windows

Claude Code está construido como una herramienta de línea de comandos diseñada para sistemas operativos similares a Unix (Linux y macOS). Aunque Windows es un excelente sistema operativo, maneja ciertos aspectos técnicos de manera diferente que Linux - cosas como permisos de archivos, gestión de procesos y llamadas del sistema. En lugar de crear una versión separada para Windows, Anthropic eligió aprovechar el Subsistema de Windows para Linux (WSL2) de Microsoft, que te permite ejecutar un entorno Linux real dentro de Windows. Este enfoque asegura que Claude Code funcione exactamente de la misma manera en todas las plataformas y obtenga todas las mismas actualizaciones y características.

### Requisitos de versión de Windows 11

Necesitarás Windows 11 versión 21H2 o posterior. Para verificar tu versión, presiona la tecla Windows + R para abrir el diálogo Ejecutar, escribe `winver`, y presiona Enter. Aparecerá una ventana mostrando tu versión de Windows. Busca algo como "Versión 22H2 (OS Build 22621.2428)" - mientras diga 21H2 o superior (como 22H2, 23H2), estás listo. Si tienes una versión anterior, necesitarás actualizar Windows primero yendo a Configuración \> Windows Update e instalando cualquier actualización disponible.

La razón por la que se requiere la versión 21H2 o posterior es que Microsoft mejoró significativamente la integración de WSL2 en estas versiones, incluyendo mejor rendimiento del sistema de archivos y soporte para GPU. Aunque WSL2 técnicamente funciona en versiones anteriores de Windows 11, tendrás una experiencia mucho más fluida con las versiones más recientes.

### Requisitos de hardware

WSL2 requiere soporte de virtualización de tu CPU, que virtualmente todos los procesadores modernos tienen, pero necesita estar habilitado. Tu sistema necesita al menos 4GB de RAM, aunque se recomienda fuertemente 8GB o más para trabajo de desarrollo cómodo. Cuando ejecutas Claude Code junto con tu editor de código, navegador y otras herramientas de desarrollo, el uso de memoria se suma rápidamente. También necesitarás aproximadamente 2-4GB de espacio libre en disco para la instalación de WSL2 y Claude Code mismo, más espacio para tus archivos de proyecto.

Para verificar si la virtualización está habilitada en tu sistema, abre el Administrador de tareas (Ctrl + Shift + Esc), haz clic en la pestaña Rendimiento, selecciona CPU en el lado izquierdo, y busca "Virtualización: Habilitada" en el lado derecho. Si dice "Deshabilitada", necesitarás habilitarla en la configuración BIOS/UEFI de tu computadora - los pasos exactos varían por fabricante, pero típicamente involucran presionar F2, F10, o Delete durante el arranque y buscar opciones como "Intel VT-x", "AMD-V", o "Tecnología de Virtualización".

### Desglose de componentes de software

Permíteme explicar cada componente de software requerido y por qué es necesario. Primero, WSL2 (Subsistema de Windows para Linux 2) es la tecnología de Microsoft para ejecutar Linux junto con Windows. El "2" es importante - WSL2 usa tecnología real del kernel de Linux y es mucho más rápido que el WSL original. No está instalado por defecto en Windows 11, pero Microsoft hace que sea fácil agregarlo.

Node.js es un runtime de JavaScript que te permite ejecutar código JavaScript fuera de un navegador web. Claude Code está construido con JavaScript/TypeScript y se distribuye a través de npm (Administrador de Paquetes de Node), que viene incluido con Node.js. Piensa en Node.js como el motor que alimenta Claude Code, mientras que npm es como el servicio de entrega que lo instala. Necesitas Node.js versión 18 o superior porque Claude Code usa características modernas de JavaScript que no estaban disponibles en versiones anteriores. Se recomiendan las versiones LTS (Soporte a Largo Plazo) porque reciben actualizaciones de seguridad por más tiempo y son más estables.

Ubuntu 20.04+ o Debian 10+ son distribuciones de Linux - piensa en ellas como diferentes "sabores" de Linux, como Windows tiene ediciones Home y Pro. Se recomienda Ubuntu para principiantes porque es amigable para el usuario y tiene documentación extensa. Los números (20.04, 10) se refieren a números de versión - necesitas estas versiones mínimas porque incluyen bibliotecas del sistema necesarias y administradores de paquetes de los que Claude Code depende.

### Opciones de emulador de terminal

Aunque Windows 11 viene con Windows Terminal preinstalado (un terminal moderno y rico en características), podrías ya tener otras opciones como el Símbolo del sistema tradicional o PowerShell. Para la mejor experiencia con Claude Code, se recomienda altamente Windows Terminal porque maneja correctamente caracteres especiales, colores y Unicode que Claude Code usa para su interfaz. También hace que sea fácil tener múltiples pestañas y cambiar entre entornos de Windows y Linux.

Si no ves Windows Terminal en tu sistema, puedes instalarlo gratis desde Microsoft Store. Solo abre la aplicación Microsoft Store, busca "Windows Terminal", y haz clic en Instalar. Otras alternativas compatibles incluyen ConEmu, Hyper, o incluso los terminales integrados en VS Code u otros entornos de desarrollo, aunque estos podrían requerir configuración adicional.

### Opcional pero recomendado: Git

Aunque Git no es estrictamente requerido para ejecutar Claude Code, es altamente recomendado si estás haciendo cualquier desarrollo de software. Git es un sistema de control de versiones que rastrea cambios en tu código a lo largo del tiempo, y Claude Code tiene características integradas para ayudar con flujos de trabajo de Git como crear commits, cambiar ramas y revisar cambios. Si planeas usar estas características, Git necesita estar instalado dentro de tu entorno WSL2 (no solo en Windows).

Puedes verificar si Git ya está instalado abriendo un terminal y escribiendo `git --version`. Si no está instalado, no te preocupes - cubriremos cómo instalarlo durante el proceso de configuración. Muchos desarrolladores ya tienen Git instalado en Windows, pero recuerda que Claude Code ejecuta en Linux, así que necesita la versión Linux de Git.

### Verificando tu conexión a internet

Necesitarás una conexión a internet estable durante la instalación para descargar varios componentes: WSL2 y Ubuntu (aproximadamente 500MB), Node.js (aproximadamente 30MB), Claude Code y sus dependencias (aproximadamente 50MB), y actualizaciones del sistema (varía, pero típicamente 100-200MB). La descarga total es usualmente menos de 1GB, pero tener una conexión confiable previene interrupciones frustrantes durante la configuración.

Adicionalmente, Claude Code requiere acceso a internet durante el uso para comunicarse con los servidores de IA de Anthropic. Mientras puedes trabajar en archivos locales sin conexión, las características de asistencia de IA necesitan una conexión activa. Si estás detrás de un firewall corporativo o proxy, podrías necesitar configuración adicional - consulta con tu departamento de TI si estás en un entorno corporativo.

### Preparando tu mentalidad

Un "prerrequisito" final que vale la pena mencionar es paciencia y disposición para aprender algunos conceptos básicos de Linux. Si nunca has usado una línea de comandos o Linux antes, algunas partes podrían sentirse poco familiares al principio. ¡Eso es completamente normal! La línea de comandos podría parecer intimidante comparada con hacer clic en botones en una interfaz gráfica, pero es realmente bastante lógica una vez que entiendes los patrones. Piénsalo como aprender a manejar transmisión manual después de solo conocer automática - hay una curva de aprendizaje, pero obtienes mucho más control y entendimiento de lo que está pasando bajo el capó.

## Proceso completo de instalación

La instalación involucra cinco fases distintas que deben completarse en orden. Piensa en esto como construir una casa - necesitas los cimientos (WSL2) antes de poder agregar la estructura (Node.js) y finalmente los toques finales (Claude Code mismo).

### Fase 1: Instalando WSL2 (Subsistema de Windows para Linux)

Para abrir PowerShell como Administrador en Windows 11, tienes varias opciones. El método más directo es hacer clic derecho en el botón Inicio (el ícono de Windows en tu barra de tareas) y seleccionar "Terminal de Windows (Admin)" o "PowerShell (Admin)" del menú que aparece. Alternativamente, puedes presionar la tecla Windows en tu teclado, escribir "powershell", y cuando veas "Windows PowerShell" aparecer en los resultados de búsqueda, hacer clic derecho y seleccionar "Ejecutar como administrador". También puedes usar el atajo de teclado Windows+X seguido de presionar A. Cuando se solicite por Control de Cuentas de Usuario preguntando "¿Quieres permitir que esta aplicación haga cambios en tu dispositivo?", haz clic en "Sí".

Una vez que PowerShell se abra con privilegios de administrador, verás "Administrador: Windows PowerShell" en la barra de título. El prompt típicamente mostrará algo como `PS C:\Windows\system32>`. Ahora ejecuta el siguiente comando:

``` powershell
wsl --install
```

Este comando hace varias cosas automáticamente: habilita las características requeridas de Windows (Plataforma de Máquina Virtual y Subsistema de Windows para Linux), descarga e instala la actualización del kernel WSL2, establece WSL2 como la versión predeterminada, e instala Ubuntu como la distribución Linux predeterminada. El proceso mostrará barras de progreso y mensajes de estado. Típicamente toma 5-10 minutos dependiendo de tu velocidad de internet.

Después de que la instalación se complete, verás un mensaje diciendo "La operación solicitada es exitosa. Los cambios no serán efectivos hasta que el sistema sea reiniciado." Reinicia tu computadora haciendo clic en Inicio, luego el botón de encendido, y seleccionando "Reiniciar". Este reinicio es crucial - WSL2 no funcionará correctamente sin él.

### Fase 2: Configurando tu entorno Linux

Después de que tu computadora se reinicie, necesitas lanzar Ubuntu por primera vez. Puedes hacer esto de tres maneras: haz clic en el botón Inicio y escribe "Ubuntu", luego haz clic en la aplicación Ubuntu que aparece; o abre Windows Terminal y haz clic en la flecha desplegable junto al botón de nueva pestaña y selecciona "Ubuntu"; o abre cualquier terminal y escribe `wsl`.

La primera vez que Ubuntu se lance, tomará un minuto o dos para completar la instalación. Verás mensajes como "Instalando, esto puede tomar algunos minutos..." seguido de "¡Instalación exitosa!" Luego se te pedirá crear un nombre de usuario y contraseña de Unix. Este es un paso importante que muchos usuarios nuevos encuentran confuso. El nombre de usuario que crees aquí es solo para tu entorno Linux - no necesita coincidir con tu nombre de usuario de Windows. Por ejemplo, si tu nombre de usuario de Windows es "JuanPerez", podrías usar "juan" o "jperez" o cualquier otro nombre de usuario válido de Linux. Escribe tu nombre de usuario elegido y presiona Enter.

Después, se te pedirá ingresar una contraseña. Aquí hay un detalle crítico: cuando escribas tu contraseña, nada aparecerá en pantalla - sin asteriscos, sin puntos, nada. Esta es una característica de seguridad en terminales de Linux. Solo escribe tu contraseña cuidadosamente y presiona Enter. Se te pedirá reescribirla para confirmar. Elige una contraseña que recuerdes porque la necesitarás para comandos administrativos (sudo) más tarde. Escríbela en un lugar seguro si es necesario.

### Fase 3: Actualizando y preparando el sistema Linux

Ahora estás dentro de tu entorno Ubuntu. El prompt se verá algo como `username@computername:~$`. El símbolo `~` representa tu directorio home. Primero, actualiza el administrador de paquetes para asegurar que tengas acceso al software más reciente. Ejecuta estos comandos uno a la vez:

``` bash
sudo apt update
```

Cuando ejecutes este primer comando sudo, te pedirá tu contraseña - la que acabas de crear. De nuevo, nada aparecerá mientras escribes. Este comando actualiza la lista de paquetes disponibles. Verás muchas líneas de salida mostrando que se está conectando a los servidores de Ubuntu y descargando información de paquetes.

``` bash
sudo apt upgrade -y
```

Este comando actualiza todos los paquetes instalados a sus versiones más recientes. La bandera `-y` automáticamente responde "sí" al prompt de confirmación. Esto podría tomar varios minutos y mostrar mucha salida. No te preocupes si ves advertencias sobre actualizaciones del kernel siendo retenidas - esto es normal en WSL.

### Fase 4: Instalando Node.js y npm

Claude Code requiere Node.js versión 18 o superior. Aunque podrías instalar Node.js a través de los repositorios predeterminados de Ubuntu, a menudo contienen versiones anteriores. En su lugar, usaremos el repositorio de NodeSource para obtener la versión LTS más reciente. Primero, descarga y ejecuta el script de configuración:

``` bash
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
```

Este comando hace varias cosas: `curl` descarga el script de configuración, `-fsSL` asegura que falle apropiadamente en errores y muestre una barra de progreso, la tubería `|` envía el script descargado a bash para ejecutarlo, y `sudo -E` lo ejecuta con privilegios de administrador mientras preserva las variables de entorno. Verás salida mostrando que está agregando la clave de firma y repositorio de NodeSource.

Ahora instala Node.js:

``` bash
sudo apt install -y nodejs
```

Esto instala tanto Node.js como npm (Administrador de Paquetes de Node). La instalación mostrará progreso y se completará en aproximadamente un minuto. Verifica que la instalación funcionó:

``` bash
node --version
```

Esto debería mostrar algo como `v20.11.0` o superior. Luego verifica npm:

``` bash
npm --version
```

Esto debería mostrar versión 10.x.x o superior.

### Fase 5: Configurando npm para instalaciones de usuario

Por defecto, npm trata de instalar paquetes globales en directorios del sistema, lo que requiere sudo y puede causar problemas de permisos. Configuraremos para que use un directorio en tu carpeta home en su lugar. Esta es una mejor práctica que previene muchos problemas comunes. Primero, crea un directorio para paquetes globales de npm:

``` bash
mkdir -p ~/.npm-global
```

La bandera `-p` significa "crear directorios padre según sea necesario". El `~/.npm-global` es un directorio oculto (el punto lo hace oculto) en tu carpeta home. Dile a npm que use este directorio:

``` bash
npm config set prefix ~/.npm-global
```

Ahora necesitas agregar este directorio a tu PATH para que tu sistema pueda encontrar los programas instalados. El PATH es como una lista de lugares donde tu sistema busca comandos. Agrégalo a tu archivo de configuración:

``` bash
echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
```

Este comando añade (`>>`) una línea a tu archivo `.bashrc`, que se ejecuta cada vez que abres un terminal. La línea agrega tu directorio global de npm al principio del PATH. Aplica los cambios a tu sesión actual:

``` bash
source ~/.bashrc
```

Esto recarga tu archivo `.bashrc` sin necesidad de cerrar y reabrir el terminal. Puedes verificar que funcionó ejecutando:

``` bash
echo $PATH
```

Deberías ver `/home/tunombredeusuario/.npm-global/bin` al principio de la salida.

## Instalando Claude Code mismo

Ahora llegamos al momento para el que te has estado preparando - realmente instalar Claude Code. Si los pasos anteriores fueron como preparar un lecho de jardín, aquí es donde plantamos la semilla. La buena noticia es que si has seguido los pasos anteriores correctamente, esta parte debería ser fluida y directa.

### Entendiendo el proceso de instalación de npm

Antes de ejecutar el comando de instalación, entendamos qué está a punto de pasar. Cuando instalas un paquete globalmente con npm (eso es lo que significa la bandera `-g`), npm descarga el paquete y todas sus dependencias del registro de npm, un repositorio masivo en línea de paquetes JavaScript. Luego coloca los archivos ejecutables en tu directorio bin global designado (¿recuerdas cuando configuramos eso?), haciéndolos disponibles como comandos que puedes ejecutar desde cualquier lugar en tu terminal.

Abre tu terminal WSL Ubuntu si no está ya abierto. Puedes verificar que estás en el lugar correcto verificando que tu prompt muestre tu nombre de usuario de Linux, no tu ruta de Windows. Debería verse algo como `username@computername:~$`. Si ves algo como `/mnt/c/Users/...`, estás viendo tu sistema de archivos de Windows a través de Linux, lo cual está bien - puedes ejecutar la instalación desde cualquier lugar.

### Ejecutando el comando de instalación

Ahora, escribe o copia este comando exactamente:

``` bash
npm install -g @anthropic-ai/claude-code
```

Permíteme desglosar lo que significa cada parte. El `npm install` le dice a npm que descargue e instale un paquete. La bandera `-g` significa "globalmente" - instalar esto para uso en cualquier lugar del sistema, no solo en un proyecto específico. El `@anthropic-ai/claude-code` es el nombre oficial del paquete - la parte `@anthropic-ai` es el namespace de Anthropic en npm (como un nombre de usuario), asegurando que estés obteniendo el paquete auténtico, no el proyecto de alguien más con un nombre similar.

Aquí hay un punto crucial que confunde a muchos usuarios de Windows: **no uses sudo con este comando**. En sistemas Linux tradicionales, podrías necesitar sudo para instalaciones globales, pero recuerda que configuramos npm para usar tu directorio personal específicamente para evitar esto. Si usas sudo aquí, instalará Claude Code en la ubicación incorrecta y causará problemas de permisos más tarde. Solo ejecuta el comando como tu usuario regular.

Cuando presiones Enter, verás npm entrar en acción. La salida mostrará varias cosas ocurriendo. Primero, contacta el registro de npm y descarga los metadatos del paquete. Luego analiza dependencias - Claude Code depende de otros paquetes para funcionar, y npm determina exactamente qué versiones necesita. Verás una barra de progreso mientras descarga cada paquete. La salida podría verse algo como:

```         
⸨⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⸩ ⠧ idealTree:@anthropic-ai/claude-code: timing idealTree:#root Completed in 1234ms
```

No te preocupes si ves advertencias sobre dependencias opcionales o paquetes obsoletos - estas son comunes y usualmente inofensivas. Lo que importa es que la instalación se complete sin errores. Todo el proceso típicamente toma 30 segundos a 2 minutos dependiendo de tu velocidad de internet.

### Entendiendo lo que se acaba de instalar

Cuando la instalación termine, npm mostrará un resumen de lo que instaló. Podrías ver algo indicando la versión instalada, como `+ @anthropic-ai/claude-code@1.0.38`. El signo más significa que fue agregado exitosamente, y el número después del símbolo \@ es la versión. A partir de julio de 2025, la versión 1.0.38 es la más reciente, pero podrías ver una versión más nueva si se han lanzado actualizaciones.

¿Qué pasó realmente detrás de escenas? npm creó un nuevo directorio en `~/.npm-global/lib/node_modules/@anthropic-ai/claude-code/` conteniendo todos los archivos de Claude Code. También creó un enlace simbólico (como un acceso directo) en `~/.npm-global/bin/` que apunta al ejecutable principal de Claude Code. Esta es la razón por la que ahora puedes escribir `claude` desde cualquier lugar y el sistema sabe qué ejecutar.

### Verificando la instalación

Antes de celebrar, asegurémonos de que todo se instaló correctamente. Escribe:

``` bash
claude --version
```

Esto debería imprimir inmediatamente el número de versión, algo como `1.0.38`. Si ves esto, ¡felicidades - Claude Code está instalado! Si en su lugar ves `command not found`, no entres en pánico. Esto usualmente significa que el PATH que configuramos anteriormente no está funcionando correctamente. Intenta ejecutar `source ~/.bashrc` de nuevo para recargar tu configuración, luego intenta el comando de versión otra vez.

### Primera ejecución y autenticación

Ahora para la parte emocionante - realmente iniciemos Claude Code. Antes de ejecutarlo, navega a un directorio donde tengas un proyecto de codificación, o crea un directorio de prueba:

``` bash
mkdir ~/test-claude-project
cd ~/test-claude-project
```

El comando `mkdir` crea un nuevo directorio, y `cd` cambia hacia él. El símbolo `~` es un acceso directo para tu directorio home de Linux. Ahora, simplemente escribe:

``` bash
claude
```

La primera vez que ejecutes Claude Code, necesita conectarse a los servidores de Anthropic para verificar tu acceso. Verás un mensaje de bienvenida y luego se te presentarán opciones de autenticación. Aquí es donde Claude Code difiere de muchas herramientas de línea de comandos - no es solo un programa local sino una conexión a los servicios de IA de Anthropic.

### Entendiendo las opciones de autenticación

Claude Code te presentará varios métodos de autenticación, y elegir el correcto depende de cómo quieras usar y pagar por el servicio. Permíteme explicar cada opción en detalle.

La opción **Consola de Anthropic** es para desarrolladores que quieren acceso API de pago por uso. Esto es ideal si ya estás usando la API de Anthropic para otros proyectos o prefieres pagar solo por lo que uses. Necesitarás crear una cuenta en console.anthropic.com, agregar un método de pago, y generar una clave API. El uso se factura por token (aproximadamente por palabra) procesado por la IA.

La opción de **suscripción Claude Pro/Max** es para usuarios que tienen una suscripción mensual a Claude a través de claude.ai. A \$20/mes para Pro o \$30/mes para Max, esto te da cierta cantidad de uso a través de todas las interfaces de Claude, incluyendo Claude Code. Esta es a menudo la opción más conveniente para desarrolladores individuales que también usan Claude para otras tareas.

Las **opciones Enterprise** (AWS Bedrock o Google Vertex AI) son para organizaciones que tienen acuerdos empresariales con estos proveedores de nube. Si tu empresa usa estos servicios, podrías recibir instrucciones para usar uno de estos métodos de autenticación con credenciales proporcionadas por tu departamento de TI.

### Completando el proceso de autenticación

Cuando selecciones una opción (usando teclas de flecha y Enter), Claude Code abrirá tu navegador web predeterminado. Si estás en WSL y un navegador no se abre automáticamente, verás una URL que puedes copiar y pegar en cualquier navegador. La URL se verá algo como `https://claude.ai/auth/code?...` con una cadena larga de caracteres.

En el navegador, iniciarás sesión en tu servicio elegido. Si aún no tienes una cuenta, puedes crear una en este punto. Para la Consola de Anthropic, necesitarás configurar facturación. Para Claude Pro/Max, necesitarás una suscripción activa. Después de iniciar sesión y autorizar Claude Code, verás un token de autenticación - una cadena larga de caracteres de apariencia aleatoria.

Copia este token completo (Ctrl+C en Windows), regresa a tu terminal, y pégalo (clic derecho en la mayoría de terminales, o Ctrl+Shift+V en Windows Terminal) cuando se solicite. Presiona Enter, y Claude Code verificará el token y lo guardará de forma segura. Deberías ver un mensaje de éxito confirmando que estás conectado.

### Solucionando problemas de autenticación

Si la autenticación falla, las causas más comunes son copiar el token incorrectamente (perdiendo caracteres al principio o al final), un token expirado (solo son válidos por unos minutos), o problemas de conectividad de red. Claude Code usualmente te dará un mensaje de error útil apuntando al problema específico. Siempre puedes reiniciar el proceso de autenticación ejecutando `claude` de nuevo o usando el comando `/auth reset` una vez dentro de Claude Code.

## Configuración y verificación

Después de instalar y autenticar Claude Code exitosamente, eres como un piloto que ha encendido el motor pero no ha despegado aún. Esta sección te ayudará a entender cómo configurar Claude Code para tus necesidades específicas y verificar que todo esté funcionando correctamente. Piensa en esto como tu lista de verificación pre-vuelo - asegurándote de que todos los sistemas estén listos antes de comenzar a usar Claude Code para trabajo real.

### Entendiendo el sistema de configuración de Claude Code

Claude Code usa un sistema de configuración por capas, similar a cómo Git maneja configuraciones. Esto podría parecer complejo al principio, pero es realmente bastante elegante una vez que entiendes el razonamiento. Hay tres niveles de configuraciones, cada uno sirviendo un propósito diferente y tomando precedencia en un orden específico.

Las configuraciones globales viven en `~/.claude/settings.json` en tu directorio home de Linux. Estas se aplican a todos tus proyectos y contienen cosas como tu tema preferido, comportamientos predeterminados, y tokens de autenticación. Para ver este archivo, puedes usar el comando `cat ~/.claude/settings.json` o abrirlo en un editor de texto con `nano ~/.claude/settings.json`. No te preocupes si el archivo no existe aún - Claude Code lo crea automáticamente cuando es necesario.

Las configuraciones específicas del proyecto van en `.claude/settings.json` dentro de cada directorio de proyecto. Estas sobrescriben las configuraciones globales para ese proyecto particular. Por ejemplo, podrías querer que Claude Code sea más cauteloso con cambios en tu proyecto de producción pero más experimental en tus proyectos personales. Cuando Claude Code inicia, busca este archivo en el directorio actual y aplica cualquier configuración que encuentre.

Las configuraciones personales se almacenan en `.claude/settings.local.json` dentro de directorios de proyecto. Este archivo está destinado a ser excluido del control de versiones (agregado a .gitignore) para que cada desarrollador en un equipo pueda tener sus propias preferencias sin afectar a otros. Esto es perfecto para configuraciones como preferencias del editor o rutas de archivos locales que varían entre desarrolladores.

### Configurando permisos y límites

Una de las características más importantes de Claude Code es su sistema de permisos. A diferencia de dar acceso a un desarrollador humano a tu base de código, donde se aplican la confianza y el juicio profesional, un asistente de IA necesita límites explícitos. Exploremos cómo configurar estos correctamente.

Inicia Claude Code en tu proyecto de prueba ejecutando `claude` y luego escribe el comando `/permissions`. Esto te muestra lo que Claude Code está actualmente permitido hacer. Por defecto, tiene permisos bastante conservadores - puede leer archivos, sugerir cambios, y ayudar con código, pero necesita tu aprobación para cualquier cosa que modifique archivos o ejecute comandos.

Para ajustar permisos, usa el comando `/permissions edit`. Esto abre un menú interactivo donde puedes alternar diferentes capacidades. Por ejemplo, podrías ver opciones como "Permitir creación de archivos", "Permitir modificación de archivos", "Permitir ejecución de comandos", y "Permitir operaciones git". Usa las teclas de flecha para navegar y Espacio para alternar cada permiso encendido o apagado.

Permíteme explicar lo que significa cada tipo de permiso en la práctica. "Permitir creación de archivos" permite a Claude Code crear nuevos archivos cuando le pides que estructure un nuevo componente o agregue un archivo de configuración. Sin esto, solo puede mostrarte lo que el archivo debería contener, y tienes que crearlo manualmente. "Permitir modificación de archivos" es similar pero para archivos existentes - con esto habilitado, Claude Code puede aplicar directamente correcciones o refactorizaciones en lugar de solo sugerirlas.

"Permitir ejecución de comandos" es más poderoso y debería usarse con consideración. Con esto habilitado, Claude Code puede ejecutar comandos de construcción, pruebas, o scripts en tu nombre. Esto es increíblemente conveniente pero también significa que confías en Claude Code para ejecutar comandos que potencialmente podrían afectar tu sistema. "Permitir operaciones git" habilita características como crear commits, cambiar ramas, o hacer push de cambios - útil para mantener un historial limpio de control de versiones.

### Configurando compatibilidad de terminal

Claude Code usa varios caracteres Unicode y códigos de color ANSI para crear su interfaz. Si ves caracteres extraños o la pantalla se ve rota, necesitas configurar la compatibilidad del terminal. Escribe `/config` dentro de Claude Code para acceder a configuraciones de pantalla.

El menú de configuración te permite elegir entre diferentes modos de pantalla. Si estás usando Windows Terminal (recomendado), selecciona "Terminal Moderno" para la mejor experiencia con colores completos y caracteres especiales. Si estás usando un terminal más antiguo o accediendo WSL a través de SSH, podrías necesitar seleccionar "Modo Compatible" que usa caracteres ASCII más simples.

También puedes configurar temas de color aquí. Claude Code típicamente ofrece opciones como "Oscuro", "Claro", "Alto Contraste", y "Solarized". Elige lo que sea cómodo para tus ojos - si no estás seguro, comienza con "Oscuro" ya que tiende a ser más fácil para los ojos durante sesiones largas de codificación. El tema afecta no solo la interfaz de Claude Code sino también cómo resalta la sintaxis de fragmentos de código.

### Probando funcionalidad principal

Ahora verifiquemos que Claude Code esté funcionando correctamente con una serie de pruebas. Piensa en esto como un crucero de prueba - probaremos cada sistema principal para asegurar que esté funcionando correctamente. Primero, probemos la interacción básica. Escribe:

```         
explica qué archivos están en este directorio
```

Claude Code debería responder listando los archivos en tu directorio actual (que podrían estar vacíos si estás en el directorio de prueba que creamos) y explicando lo que ve. Esto prueba que Claude Code puede leer tu sistema de archivos correctamente a través de WSL.

Después, probemos la creación de archivos. Pregunta a Claude Code:

```         
crea un simple script hello world en Python
```

Si tienes permisos de creación de archivos habilitados, Claude Code creará un nuevo archivo llamado algo como `hello_world.py` con un script básico de Python. Si los permisos están deshabilitados, te mostrará el contenido pero te pedirá crear el archivo manualmente. Esto prueba el sistema de permisos y la capacidad de creación de archivos.

### Probando integración del sistema de archivos de Windows

Un aspecto único de usar Claude Code en Windows a través de WSL es acceder a tus archivos de Windows. Verifiquemos que esto funcione correctamente. Navega a tu carpeta de Documentos de Windows:

``` bash
cd /mnt/c/Users/[TuNombreDeUsuarioDeWindows]/Documents
```

Reemplaza `[TuNombreDeUsuarioDeWindows]` con tu nombre de usuario real de Windows. Nota que si tu nombre de usuario tiene espacios, necesitas escaparlos con barras inversas o envolver la ruta en comillas, como `/mnt/c/Users/Juan\ Perez/Documents` o `"/mnt/c/Users/Juan Perez/Documents"`.

Una vez ahí, ejecuta Claude Code de nuevo y pregunta:

```         
lista todos los archivos en este directorio
```

Claude Code debería mostrar exitosamente el contenido de tu carpeta de Documentos de Windows. Esto confirma que el puente del sistema de archivos WSL está funcionando correctamente. Sin embargo, podrías notar que las operaciones son ligeramente más lentas cuando trabajas con archivos de Windows comparado con archivos nativos de Linux - esto es normal debido a la capa de traducción del sistema de archivos.

### Verificando integración con Git

Si planeas usar las características de Git de Claude Code, probemos esas también. Primero, verifica si Git está instalado en tu entorno WSL:

``` bash
git --version
```

Si Git no está instalado, instálalo con:

``` bash
sudo apt update
sudo apt install git -y
```

Ahora crea un repositorio Git de prueba:

``` bash
cd ~/test-claude-project
git init
echo "# Proyecto de Prueba" > README.md
git add README.md
git commit -m "Commit inicial"
```

Inicia Claude Code de nuevo y prueba:

```         
muéstrame el historial de git
```

Claude Code debería mostrar tu historial de commits. Si tienes permisos de operaciones Git habilitados, también puedes pedirle crear commits, cambiar ramas, o realizar otras operaciones Git.

### Personalizando el comportamiento de Claude Code

Más allá de permisos y configuraciones de pantalla, Claude Code tiene varias configuraciones de comportamiento que puedes ajustar. Escribe `/settings` para ver todas las opciones disponibles. Algunas particularmente útiles incluyen configurar tus lenguajes de programación preferidos (para que Claude Code pueda adaptar sus sugerencias), configurar comportamiento de autoguardado, y ajustar la verbosidad de las respuestas de Claude Code.

Por ejemplo, si trabajas principalmente con React y TypeScript, podrías querer decirle esto a Claude Code para que asuma estas tecnologías cuando hagas preguntas generales. O si encuentras las respuestas de Claude Code demasiado verbosas, puedes ajustar el nivel de detalle para que sea más conciso.

### Creando tu primera interacción real

Con todo configurado y verificado, hagamos algo más significativo que hello world. Si tienes un proyecto real, navega hacia él. De lo contrario, creemos un proyecto web simple:

``` bash
mkdir ~/my-web-app
cd ~/my-web-app
claude
```

Ahora pide a Claude Code que te ayude a estructurar un proyecto:

```         
crea una página HTML simple con estilos CSS e interactividad JavaScript
```

Observa mientras Claude Code crea múltiples archivos, explica lo que hace cada uno, y muestra cómo funcionan juntos. Esto demuestra la capacidad de Claude Code para trabajar con múltiples archivos y tecnologías simultáneamente. Puedes hacer seguimiento con preguntas como "explica cómo se conecta el JavaScript con el HTML" o "haz el estilo más moderno" para ver cómo Claude Code mantiene el contexto a través de la conversación.

### Guardando y respaldando tu configuración

Una vez que tengas Claude Code configurado a tu gusto, es sabio respaldar tus configuraciones. Copia tu archivo de configuración global a una ubicación segura:

``` bash
cp ~/.claude/settings.json ~/claude-backup-settings.json
```

Si estás usando control de versiones para tus dotfiles (una práctica común de desarrollador), podrías querer agregar la configuración de Claude a tu repositorio de dotfiles. Esto hace fácil restaurar tus configuraciones si necesitas reinstalar o configurar Claude Code en otra máquina.

## Problemas comunes de solución de problemas

El error de instalación más frecuente es **"Claude Code no es compatible con Windows"**, que ocurre cuando ejecutas npm desde CMD o PowerShell de Windows en lugar de WSL. Siempre asegúrate de estar dentro del terminal WSL (Ubuntu). Si encuentras **"exec: node: not found"**, WSL está usando la instalación de Node.js de Windows en lugar de la versión de Linux - reinstala Node.js dentro de WSL y verifica que `which node` muestre `/usr/bin/node`, no una ruta `/mnt/c/...`.

Los errores de permisos (EPERM) ocurren cuando npm trata de instalar en directorios del sistema. Nunca uses `sudo npm install -g` - en su lugar, configura el prefijo de npm escribible por el usuario como se describe arriba. Para fallos de autenticación, resetea con `/auth reset` y reconfigura con `/auth login`. Los problemas de PATH pueden resolverse asegurando que `export PATH=~/.npm-global/bin:$PATH` esté en tu archivo `~/.bashrc`.

## Rendimiento y mejores prácticas

Para rendimiento óptimo, trabaja dentro del sistema de archivos WSL (`/home/...`) en lugar de acceder archivos de Windows a través de `/mnt/c/...` cuando sea posible. Claude Code puede consumir recursos significativos con bases de código grandes, así que usa flujos de trabajo basados en archivos para contenido extenso en lugar de pegado directo. Inicia Claude desde el directorio raíz de tu proyecto, usa prompts descriptivos para tareas complejas, y siempre revisa cambios antes de aprobarlos.

Las mejores prácticas de seguridad incluyen nunca commitear claves API al control de versiones, usar GitHub Secrets para integración CI/CD, configurar permisos apropiados de acceso a archivos, y revisar regularmente controles de acceso. La herramienta almacena claves API en un equivalente de keychain encriptado y proporciona controles de permisos granulares para entornos empresariales.

## Tutorial: Creando tu Primer Proyecto "Hello World" con Claude Code

Ahora que Claude Code está instalado y configurado, caminemos a través de crear tu primer proyecto juntos. Este tutorial demostrará cómo Claude Code transforma conversaciones en lenguaje natural en código funcional, usando un programa clásico "Hello World" en C# o VB.NET. Piensa en esto como tu primera conversación real con tu nuevo compañero de programación IA, donde exploraremos no solo lo que Claude Code puede hacer, sino cómo comunicarte con él efectivamente.

### Configurando tu espacio de trabajo del proyecto

Primero, creemos un directorio dedicado para nuestro proyecto Hello World. Abre tu terminal WSL y navega a una ubicación donde quieras crear el proyecto. Recomiendo quedarte dentro del sistema de archivos Linux para mejor rendimiento, en lugar de usar el sistema de archivos de Windows a través de `/mnt/c/`. Escribe estos comandos:

``` bash
cd ~
mkdir hello-world-dotnet
cd hello-world-dotnet
```

Estos comandos te llevan a tu directorio home, crean una nueva carpeta llamada `hello-world-dotnet`, y luego se mueven a esa carpeta. La razón por la que estamos creando un directorio dedicado es que Claude Code funciona mejor cuando tiene un contexto de proyecto claro. Cuando inicias Claude Code desde dentro de un directorio de proyecto, entiende que todo lo que discutas se relaciona con ese proyecto específico.

Ahora, iniciemos Claude Code desde dentro de este directorio:

``` bash
claude
```

Deberías ver el mensaje de bienvenida de Claude Code y un prompt esperando tu entrada. Aquí es donde comienza la magia. A diferencia del desarrollo tradicional donde inmediatamente comenzarías escribiendo código, con Claude Code comienzas teniendo una conversación sobre lo que quieres crear.

### Teniendo tu primera conversación con Claude Code

Comencemos con una solicitud simple. Escribe lo siguiente y presiona Enter:

```         
Quiero crear una aplicación de consola Hello World. ¿Debería usar C# o VB.NET?
```

Nota cómo no estamos solo comandando a Claude Code que haga algo, sino involucrándolo en un proceso de toma de decisiones. Claude Code probablemente responderá con una comparación reflexiva de ambos lenguajes, explicando que C# es más ampliamente usado en desarrollo .NET moderno con más recursos de aprendizaje disponibles, mientras que VB.NET podría ser más legible para principiantes que vienen de ciertos antecedentes. Este tipo de diálogo te ayuda a tomar decisiones informadas en lugar de elecciones arbitrarias.

Basado en la respuesta de Claude Code, digamos que decides usar C#. Ahora puedes ser más específico con tu próxima solicitud:

```         
Vamos a crear una aplicación de consola Hello World en C#. Por favor configura la estructura del proyecto y explica qué hace cada archivo.
```

Observa mientras Claude Code entra en acción. Si tienes permisos de creación de archivos habilitados, creará varios archivos. Si no, te mostrará el contenido para crear manualmente. De cualquier manera, Claude Code explicará el propósito de cada archivo que crea o sugiere.

### Entendiendo la estructura del proyecto

Claude Code típicamente creará una estructura como esta para una aplicación de consola C# moderna. Permíteme guiarte a través de lo que crea y por qué cada pieza importa. Primero, creará un archivo de proyecto, usualmente llamado `HelloWorld.csproj`. Este archivo XML es como una receta que le dice al sistema de construcción .NET cómo compilar tu programa. Claude Code podría crear algo como esto:

``` xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>
</Project>
```

Claude Code explicará que `<OutputType>Exe</OutputType>` significa que estamos construyendo un programa ejecutable (en oposición a una biblioteca), y `<TargetFramework>net8.0</TargetFramework>` especifica que estamos usando .NET 8.0, la versión de soporte a largo plazo más reciente a partir de 2025. Las configuraciones nullable e implicit usings son características modernas de C# que hacen el código más seguro y limpio.

Después, Claude Code creará el archivo principal del programa, típicamente `Program.cs`:

``` csharp
// Este es el punto de entrada de nuestra aplicación
Console.WriteLine("Hello, World!");

// Hagámoslo interactivo
Console.WriteLine("¿Cómo te llamas?");
string name = Console.ReadLine() ?? "Anónimo";
Console.WriteLine($"¡Mucho gusto conocerte, {name}!");

// Mantener la ventana de consola abierta
Console.WriteLine("\nPresiona cualquier tecla para salir...");
Console.ReadKey();
```

Nota cómo Claude Code no solo crea el "Hello World" mínimo sino que agrega mejoras útiles como hacerlo interactivo y prevenir que la ventana de consola se cierre inmediatamente. Estos toques muestran cómo la asistencia IA va más allá de la generación simple de código para realmente pensar en la experiencia del usuario.

### Explorando los poderes explicativos de Claude Code

Una de las mayores fortalezas de Claude Code es su capacidad para explicar código en contexto. Intenta preguntar:

```         
¿Puedes explicar el operador ?? en el código que acabas de crear?
```

Claude Code explicará que el `??` es el operador de coalescencia nula, que proporciona un valor predeterminado ("Anónimo") si `Console.ReadLine()` devuelve null. Este tipo de explicación bajo demanda te ayuda a aprender mientras codificas. Puedes profundizar haciendo preguntas de seguimiento:

```         
¿Cuándo devolvería ReadLine null? Muéstrame otras formas de manejar esto.
```

Este enfoque conversacional para aprender es lo que hace especial a Claude Code. En lugar de buscar en documentación o Stack Overflow, estás teniendo una discusión contextual sobre tu código específico.

### Construyendo y ejecutando el proyecto

Ahora veamos si nuestro código realmente funciona. Primero, necesitamos verificar si .NET está instalado en WSL. Pregunta a Claude Code:

```         
¿Cómo verifico si .NET SDK está instalado y ejecuto este proyecto?
```

Claude Code te guiará a través de verificar .NET con `dotnet --version` y, si no está instalado, proporcionar los comandos para instalarlo en WSL. Esto podría involucrar comandos como:

``` bash
# Instalar .NET SDK en WSL
wget https://dot.net/v1/dotnet-install.sh
chmod +x dotnet-install.sh
./dotnet-install.sh --channel 8.0
```

Una vez que .NET esté instalado, Claude Code te mostrará cómo construir y ejecutar tu proyecto:

``` bash
dotnet build
dotnet run
```

Cuando ejecutes estos comandos, verás tu programa Hello World cobrar vida, preguntando tu nombre y respondiendo personalmente. Este momento, donde las instrucciones conversacionales se convierten en código ejecutándose, demuestra el ciclo completo de desarrollo asistido por IA.

### Iterando y mejorando

El verdadero poder de Claude Code emerge cuando quieres modificar o mejorar tu programa. Intenta solicitudes como:

```         
Agrega color a la salida de consola para hacerla más visualmente atractiva
```

Claude Code modificará tu programa para incluir texto coloreado:

``` csharp
Console.ForegroundColor = ConsoleColor.Cyan;
Console.WriteLine("Hello, World!");
Console.ForegroundColor = ConsoleColor.Yellow;
Console.WriteLine("¿Cómo te llamas?");
Console.ResetColor();
string name = Console.ReadLine() ?? "Anónimo";
Console.ForegroundColor = ConsoleColor.Green;
Console.WriteLine($"¡Mucho gusto conocerte, {name}!");
```

O intenta algo más complejo:

```         
Convierte esto para mostrar el saludo en múltiples idiomas basado en la elección del usuario
```

Claude Code refactorizará tu programa simple en algo más sofisticado, quizás agregando un sistema de menú y traducciones. Este proceso de desarrollo iterativo se siente más como programación en pareja con un colega conocedor que codificación tradicional.

### Aprendiendo a través de exploración

Exploremos la capacidad de Claude Code para enseñar a través de ejemplos. Pregunta:

```         
Muéstrame cómo agregar manejo de errores a este programa
```

Claude Code podría envolver el código en bloques try-catch y explicar diferentes tipos de excepciones. Pero aquí es donde se pone interesante - también puedes hacer preguntas filosóficas:

```         
¿Es este nivel de manejo de errores excesivo para un programa Hello World? ¿Cuál es el equilibrio correcto?
```

Este tipo de pregunta involucra a Claude Code en discusiones sobre principios de ingeniería de software, ayudándote a desarrollar juicio junto con habilidades técnicas.

### Creando la alternativa VB.NET

Si tienes curiosidad sobre VB.NET o quieres ver la diferencia, pregunta a Claude Code:

```         
Crea el mismo programa en VB.NET y ponlo en un archivo separado para poder comparar
```

Claude Code creará un archivo como `HelloWorld.vb`:

``` vbnet
Module Program
    Sub Main()
        ' Este es el punto de entrada de nuestra aplicación
        Console.WriteLine("Hello, World!")
        
        ' Hagámoslo interactivo
        Console.WriteLine("¿Cómo te llamas?")
        Dim name As String = If(Console.ReadLine(), "Anónimo")
        Console.WriteLine($"¡Mucho gusto conocerte, {name}!")
        
        ' Mantener la ventana de consola abierta
        Console.WriteLine(vbCrLf & "Presiona cualquier tecla para salir...")
        Console.ReadKey()
    End Sub
End Module
```

Luego puedes pedirle a Claude Code que explique las diferencias entre las versiones C# y VB.NET, aprendiendo sobre variaciones de sintaxis, filosofías de lenguaje, y cuándo podrías elegir uno sobre el otro.

### Mejores prácticas para trabajar con Claude Code

A través de este tutorial, has aprendido varios principios clave para el uso efectivo de Claude Code. Primero, comienza con intenciones claras pero mantente abierto al diálogo - Claude Code a menudo sugiere mejoras que no habías considerado. Segundo, usa las habilidades explicativas de Claude Code para aprender mientras construyes - cada sesión de codificación puede ser una oportunidad de aprendizaje. Tercero, itera frecuentemente con solicitudes pequeñas en lugar de tratar de describir un programa completo por adelantado.

Recuerda que Claude Code mantiene contexto a través de tu conversación, así que puedes referenciar "la función que acabamos de crear" o "el manejo de errores que discutimos" sin repetirte. Esta conciencia contextual hace que las tareas de desarrollo complejas se sientan más como conversación natural.

Finalmente, no dudes en hacer meta-preguntas sobre la programación misma. Preguntas como "¿Se considera este enfoque una buena práctica?" o "¿Qué haría diferente un desarrollador senior?" te ayudan a crecer más allá de solo hacer que el código funcione.

### Cerrando tu sesión

Cuando hayas terminado con tu proyecto Hello World, puedes simplemente escribir `exit` o `/quit` para salir de Claude Code. Tu código permanece en el directorio, listo para desarrollo adicional. Podrías querer inicializar un repositorio Git para rastrear tus cambios:

``` bash
git init
git add .
git commit -m "Proyecto inicial Hello World con asistencia de Claude Code"
```

Este tutorial te ha mostrado cómo Claude Code transforma la experiencia de desarrollo de escritura solitaria a conversación colaborativa. Has creado no solo un programa Hello World, sino explorado diferentes lenguajes, agregado características, discutido mejores prácticas, y aprendido nuevos conceptos en el camino. Este es el verdadero poder del desarrollo asistido por IA - no se trata solo de generar código más rápido, sino de aprender y mejorar mientras construyes.

## Conclusión

Aunque Claude Code requiere el paso adicional de configurar WSL2 en Windows 11, el proceso de instalación es directo una vez que entiendes el requisito del entorno Linux. La herramienta proporciona poderosas capacidades de desarrollo asistido por IA que se integran perfectamente con tu flujo de trabajo existente, ofreciendo comandos en lenguaje natural para edición de código, depuración y comprensión de proyectos. Seguir esta guía asegura una experiencia de instalación fluida y ayuda a evitar las trampas comunes que encuentran los usuarios de Windows al configurar herramientas de desarrollo basadas en terminal.